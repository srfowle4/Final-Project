beta_0 = 0.3;  
A = 5; 
omega_1 = 2 * pi * 365 / 365;
omega_2 = 2 * pi * 100 / 365; 
gamma = 0.1; 
h = 0.1;  
T = 30; 
S0 = 990; 
I0 = 10; 
R0 = 0; 
N = S0 + I0 + R0; 

time = 0:h:T;

beta_t_1 = @(t) beta_0 * (1 + A * sin(omega_1 * t)); 
beta_t_2 = @(t) beta_0 * (1 + A * sin(omega_2 * t));  

[S1, I1, R1] = solveSIR_time_varying(beta_t_1, gamma, h, T, S0, I0, R0, N); 
[S2, I2, R2] = solveSIR_time_varying(beta_t_2, gamma, h, T, S0, I0, R0, N); 

figure; 
plot(time, S1, 'b', 'LineWidth', 1.5); 
hold on; plot(time, I1, 'r', 'LineWidth', 1.5); 
plot(time, R1, 'g', 'LineWidth', 1.5); 
title('SIR Model with Daily Periodic Beta(t)'); 
xlabel('Time (days)'); 
ylabel('Population'); 
legend('S(t)', 'I(t)', 'R(t)'); 
grid on; 

figure; 
plot(time, S2, 'b', 'LineWidth', 1.5); 
hold on; 
plot(time, I2, 'r', 'LineWidth', 1.5); 
plot(time, R2, 'g', 'LineWidth', 1.5); 
title('SIR Model with Weekly Periodic Beta(t)'); 
xlabel('Time (days)'); 
ylabel('Population'); 
legend('S(t)', 'I(t)', 'R(t)'); 
grid on; 

N = length(time); 
f = (0:N/2-1) / (N * h); 

I_fft_1 = abs(fft(I1)); 
I_fft_1_half = I_fft_1(1:floor(N/2)); 

figure; 
plot(f, I_fft_1_half, 'r', 'LineWidth', 1.5); 
title('Spectrum of I(t) with Daily Periodic Beta(t)'); 
xlabel('Frequency (1/day)'); 
ylabel('|FFT(I(t))|'); 
grid on;  

I_fft_2 = abs(fft(I2)); 
I_fft_2_half = I_fft_2(1:floor(N/2)); 

figure; 
plot(f, I_fft_2_half, 'r', 'LineWidth', 1.5); 
title('Spectrum of I(t) with Weekly Periodic Beta(t)'); 
xlabel('Frequency (1/day)'); 
ylabel('|FFT(I(t))|'); 
grid on; 

function [S, I, R] = solveSIR_time_varying(beta_t, gamma, h, T, S0, I0, R0, N) 
    time = 0:h:T; 
    S = zeros(1, length(time)); 
    I = zeros(1, length(time)); 
    R = zeros(1, length(time)); 
    S(1) = S0; 
    I(1) = I0; 
    R(1) = R0; 
    for t = 1:length(time)-1 
        dSdt = @(S, I, t) -beta_t(t) * S * I / N; 
        dIdt = @(S, I, t) beta_t(t) * S * I / N - gamma * I; 
        dRdt = @(I) gamma * I; 
        k1_S = h * dSdt(S(t), I(t), time(t)); 
        k1_I = h * dIdt(S(t), I(t), time(t)); 
        k1_R = h * dRdt(I(t)); 
        k2_S = h * dSdt(S(t) + 0.5*k1_S, I(t) + 0.5*k1_I, time(t) + 0.5*h); 
        k2_I = h * dIdt(S(t) + 0.5*k1_S, I(t) + 0.5*k1_I, time(t) + 0.5*h); 
        k2_R = h * dRdt(I(t) + 0.5*k1_I); 
        k3_S = h * dSdt(S(t) + 0.5*k2_S, I(t) + 0.5*k2_I, time(t) + 0.5*h); 
        k3_I = h * dIdt(S(t) + 0.5*k2_S, I(t) + 0.5*k2_I, time(t) + 0.5*h); 
        k3_R = h * dRdt(I(t) + 0.5*k2_I); 
        k4_S = h * dSdt(S(t) + k3_S, I(t) + k3_I, time(t) + h); 
        k4_I = h * dIdt(S(t) + k3_S, I(t) + k3_I, time(t) + h); 
        k4_R = h * dRdt(I(t) + k3_I); 
        S(t+1) = S(t) + (k1_S + 2*k2_S + 2*k3_S + k4_S) / 6; 
        I(t+1) = I(t) + (k1_I + 2*k2_I + 2*k3_I + k4_I) / 6; 
        R(t+1) = R(t) + (k1_R + 2*k2_R + 2*k3_R + k4_R) / 6; 
    end 
end
