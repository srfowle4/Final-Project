beta = 0.3;
gamma = 0.1;
h = 1;
T = 30;
S0 = 990;
I0_true = 10;
R0 = 0;
N = S0 + I0_true + R0;
[S, I_true, R] = solveSIR(beta, gamma, h, T, S0, I0_true, R0, N);
time = 0:h:T;
log_I_true = log(I_true);
A = [ones(length(time), 1), time'];
b = log_I_true';
x = A\b;
I0_est = exp(x(1));
k_est = x(2);
beta_est = (k_est + gamma) * N / S0;
fprintf('Estimated I0: %.4f\n', I0_est);
Estimated I0: 16.6734
fprintf('Estimated beta: %.4f\n', beta_est);
Estimated beta: 0.2207
fprintf('Estimated k: %.4f\n', k_est);
Estimated k: 0.1184

time_10 = time(1:11);
log_I_10 = log_I_true(1:11);
A_10 = [ones(length(time_10), 1), time_10'];
b_10 = log_I_10';
x_10 = A_10\b_10;
I0_est_10 = exp(x_10(1));
k_est_10 = x_10(2);
beta_est_10 = (k_est_10 + gamma) * N / S0;
fprintf('Estimated I0 (10 days): %.4f\n', I0_est_10);
Estimated I0 (10 days): 10.1597
fprintf('Estimated beta (10 days): %.4f\n', beta_est_10);


Estimated beta (10 days): 0.2912
fprintf('Estimated k (10 days): %.4f\n', k_est_10); % Plot the results
Estimated k (10 days): 0.1883
figure;
plot(time, log_I_true, 'b-', 'LineWidth', 1.5);
hold on;
plot(time, A * x, 'r--', 'LineWidth', 1.5);
plot(time_10, A_10 * x_10, 'g--', 'LineWidth', 1.5);
xlabel('Time (days)');
ylabel('log(I(t))');
legend('True log(I(t))', 'Fit (30 days)', 'Fit (10 days)');
title('Least Squares Fit to log(I(t))');
grid on;

function [S, I, R] = solveSIR(beta, gamma, h, T, S0, I0, R0, N)
time = 0:h:T;
S = zeros(1, length(time));
I = zeros(1, length(time));
R = zeros(1, length(time));
S(1) = S0; I(1) = I0; R(1) = R0;
for t = 1:length(time)-1
dSdt = @(S, I) -beta * S * I / N;

dIdt = @(S, I) beta * S * I / N - gamma * I;
dRdt = @(I) gamma * I;
k1_S = h * dSdt(S(t), I(t)); k1_I = h * dIdt(S(t), I(t));
k1_R = h * dRdt(I(t)); k2_S = h * dSdt(S(t) + 0.5*k1_S, I(t) +
0.5*k1_I);
k2_I = h * dIdt(S(t) + 0.5*k1_S, I(t) + 0.5*k1_I);
k2_R = h * dRdt(I(t) + 0.5*k1_I);
k3_S = h * dSdt(S(t) + 0.5*k2_S, I(t) + 0.5*k2_I);
k3_I = h * dIdt(S(t) + 0.5*k2_S, I(t) + 0.5*k2_I);
k3_R = h * dRdt(I(t) + 0.5*k2_I);
k4_S = h * dSdt(S(t) + k3_S, I(t) + k3_I);
k4_I = h * dIdt(S(t) + k3_S, I(t) + k3_I);
k4_R = h * dRdt(I(t) + k3_I);
S(t+1) = S(t) + (k1_S + 2*k2_S + 2*k3_S + k4_S) / 6;
I(t+1) = I(t) + (k1_I + 2*k2_I + 2*k3_I + k4_I) / 6;
R(t+1) = R(t) + (k1_R + 2*k2_R + 2*k3_R + k4_R) / 6;
end
end
